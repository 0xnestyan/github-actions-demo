name: Version Bump and Release

on:
  push:
    branches:
      - main # Trigger on push to main
  workflow_dispatch: # Allow manual triggering

jobs:
  bump_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to read previous tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Calculate new version
        id: calculate_version
        run: |
          latest_tag="${{ env.LATEST_TAG }}"
          # Remove 'v' prefix and split into parts
          version="${latest_tag#v}"
          IFS='.' read -ra PARTS <<< "$version"
          major=${PARTS[0]}
          minor=${PARTS[1]}
          patch=${PARTS[2]:-0}
          # Bump minor version (modify as needed)
          minor=$((minor + 1))
          new_version="v$major.$minor.0"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New version: $new_version"

      - name: Generate release notes from commits
        id: generate_release_notes
        run: |
          latest_tag="${{ env.LATEST_TAG }}"
          if [ "$latest_tag" = "v0.0.0" ]; then
            # If no previous tag exists, use all commits
            commits=$(git log --pretty=format:"- [%s] %b by @%an in #%P" | grep -v "^- \[$")
          else
            # Get commits since the latest tag
            commits=$(git log $latest_tag..HEAD --pretty=format:"- [%s] %b by @%an in #%P" | grep -v "^- \[$")
          fi
          
          # Remove empty lines and format the PR numbers
          formatted_commits=$(echo "$commits" | sed '/^$/d' | sed 's/ in #\([^ ]*\)/ in #\1/')
          
          # Create the release body with markdown formatting
          echo "RELEASE_BODY=## What's Changed${formatted_commits}" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: ${{ env.NEW_VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false