name: Version Bump and Release

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  bump_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l --sort=-v:refname | head -n 1 || echo "0.1.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      - name: Calculate new version
        id: calculate_version
        run: |
          latest_tag="${{ env.LATEST_TAG }}"
          IFS='.' read -ra PARTS <<< "$latest_tag"
          major=${PARTS[0]}
          minor=${PARTS[1]:-0}
          patch=${PARTS[2]:-0}

          new_minor=$((minor + 1))
          new_version="$major.$new_minor.0"
          release_name="v.$new_version"  # Ensures correct release name

          # Ensure new version doesn't already exist
          if git tag -l | grep -q "^${new_version}$"; then
            echo "::error::Version $new_version already exists"
            exit 1
          fi

          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV
          echo "New version (tag): $new_version"
          echo "Release name: $release_name"

      - name: Generate release notes from commits
        id: generate_release_notes
        run: |
          latest_tag="${{ env.LATEST_TAG }}"
          new_version="${{ env.NEW_VERSION }}"
          repo_url="https://github.com/${{ github.repository }}"

          if [ "$latest_tag" = "0.1.0" ]; then
            commits=$(git log --format="- %s by @%an in %h" | sed '/^$/d')
          else
            commits=$(git log $latest_tag..HEAD --format="- %s by @%an in %h" | sed '/^$/d')
          fi

          {
            echo "RELEASE_BODY<<EOF"
            echo "## What's Changed"
            echo "$commits"
            echo ""
            echo "[Full Changelog]($repo_url/compare/$latest_tag...$new_version)"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: ${{ env.RELEASE_NAME }}  # This ensures 'v.3.5.0'
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
