name: Version Bump and Release

on:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

jobs:
  bump_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Get all tags and sort by version number
          latest_tag=$(git tag -l | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1 || echo "0.1.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      - name: Calculate new version
        id: calculate_version
        run: |
          latest_tag="${{ env.LATEST_TAG }}"
          # Split into parts
          IFS='.' read -ra PARTS <<< "$latest_tag"
          major=${PARTS[0]}
          minor=${PARTS[1]:-0}
          patch=${PARTS[2]:-0}

          # Bump minor version
          new_minor=$((minor + 1))
          new_version="$major.$new_minor.0"

          # Check if the new version already exists
          if git rev-parse "$new_version" >/dev/null 2>&1; then
            echo "::error::Version $new_version already exists"
            exit 1
          fi

          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New version: $new_version"

      - name: Generate release notes from commits
        id: generate_release_notes
        run: |
          latest_tag="${{ env.LATEST_TAG }}"
          new_version="${{ env.NEW_VERSION }}"
          repo_url="https://github.com/${{ github.repository }}"

          if [ "$latest_tag" = "0.1.0" ]; then
            # If no previous tag exists, use all commits
            commits=$(git log --format="- %s by @%an in %h" | sed '/^$/d')
          else
            # Get commits since the latest tag
            commits=$(git log $latest_tag..HEAD --format="- %s by @%an in %h" | sed '/^$/d')
          fi

          # Write to GITHUB_ENV with proper multiline handling
          {
            echo "RELEASE_BODY<<EOF"
            echo "## What's Changed"
            echo "$commits"
            echo ""
            echo "Full Changelog: [$latest_tag...$new_version]($repo_url/compare/$latest_tag...$new_version)"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Create new tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Double check the tag doesn't exist before creating it
          if ! git rev-parse "${{ env.NEW_VERSION }}" >/dev/null 2>&1; then
            git tag ${{ env.NEW_VERSION }}
            git push origin ${{ env.NEW_VERSION }}
          else
            echo "Tag ${{ env.NEW_VERSION }} already exists, skipping tag creation"
            exit 1
          fi

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: v.${{ env.NEW_VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
